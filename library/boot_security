#!/usr/bin/python
# -*- mode: python -*-

# Copyright 2015 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


DOCUMENTATION = '''
---
module: boot_security
short_description: Apply desired boot security settings for boot policy
description:
  - Allows to check if desired boot security option is selected. If not modify settings to apply the desired secure_boot option for boot policy.
 
version_added: "0.1.0"
author: 
    - "Cisco UCS Team"
    - "Jyotsna Venkatesh"
'''

EXAMPLES = '''
# Apply boot_security for boot policy 
boot_security:
      name="sample3"
      secure_boot="no"
      handle={{ handle_output.handle }}
'''

from ucsmsdk.mometa.lsboot.LsbootPolicy import LsbootPolicy
from ucsmsdk.mometa.lsboot.LsbootBootSecurity import LsbootBootSecurity
from ucsmsdk.mometa.lsboot.LsbootLan import LsbootLan
from ucsmsdk.mometa.lsboot.LsbootLanImagePath import LsbootLanImagePath
from ucsmsdk.mometa.lsboot.LsbootSan import LsbootSan
from ucsmsdk.ucshandle import UcsHandle
import json
import jsonpickle

def boot_security(module):

    name = module.params.get('name')
    secure_boot = module.params.get('secure_boot')
    handle = module.params.get('handle')

    results = {}

    ucs_handle = jsonpickle.decode(handle)

###-------CHECK IF MO EXISTS------------------------------------

    try:

	mo = ucs_handle.query_children(in_dn="org-root/boot-policy-"+name, class_id="LsbootBootSecurity")

    except:
        module.fail_json(msg="Could not query children of org-root")


###---------check if obj is empty or non-empty -----------------

    obj_exists = lambda obj: True if obj != [] else False

###------if expected state is "present"--------------------------

    if mo:

		if (mo[0].secure_boot == secure_boot):
			results['expected'] = True;
			results['changed'] = False;

		else:
	    		try:
				obj = ucs_handle.query_dn("org-root/boot-policy-"+name)
				if (obj.boot_mode == "uefi"):
					mo_1 = LsbootBootSecurity(parent_mo_or_dn=obj, secure_boot=secure_boot)
					ucs_handle.set_mo(mo_1)
					ucs_handle.commit()
					results['expected'] = False;
					results['changed'] = True;
				else:
					results['expected'] = False;
					results['changed'] = False;

	   		except:
				module.fail_json(msg="Modify boot security creation failed")

##-------else enable boot security with desired config ---------

    else:
    	try:
		obj = ucs_handle.query_dn("org-root/boot-policy-"+name)
		if(obj.boot_mode == "uefi"):
			mo_1 = LsbootBootSecurity(parent_mo_or_dn=obj, secure_boot=secure_boot)
			results['created'] = True;
			results['changed'] = True;
			ucs_handle.add_mo(mo_1)
			ucs_handle.commit()
		else:
			results['expected'] = False;
			results['changed'] = False;
   	except:
		module.fail_json(msg="Configure Boot security failed")

    return results

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name        = dict(required=True),
            secure_boot  = dict(required=True),
            handle    = dict(required=True)
        )
    )

    results = boot_security(module)
    module.exit_json(**results)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()

