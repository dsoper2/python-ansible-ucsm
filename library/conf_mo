#!/usr/bin/python
# -*- mode: python -*-

# Copyright 2015 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


DOCUMENTATION = '''
---
module: network_qos_class
short_description: configure/remove qos classes 
description:
  - Lets the user add/remove and configure qos classes 
version_added: "0.1.0"
author: 
    - "Cisco UCS Team"
    - "Vikrant Balyan"
'''

EXAMPLES = '''
# add a qos class the Ucs server
- network_qos_class: 
    priority={{ priority }}
    cos={{ cos }}
    drop={{ drop }}
    weight={{ weight }}
    mtu={{ mtu }}
    multicast_optimize={{ multicast_optimize }}
    handle={{ handle }}
    state=present

# remove a qos class from the Ucs server
- network_qos_class: 
    priority={{ priority }}
    handle={{ handle }}
    state=absent
'''

from ucsmsdk.mometa.lsboot.LsbootPolicy import LsbootPolicy

def conf_mo(module):

	parent_mo_or_dn = module.params.get('parent_mo_or_dn')
	name    = module.params.get('name')
	descr  = module.params.get('descr')
	reboot_on_update       = module.params.get('reboot_on_update')
	policy_owner      = module.params.get('policy_owner')
	enforce_vnic_name    = module.params.get('enforce_vnic_name')
	boot_mode       = module.params.get('boot_mode')
   	handle = UcsHandle("192.168.199.142", "admin", "admin")
    
    results = {}

	mo = LsbootPolicy(parent_mo_or_dn="org-root", name="efiboot2", descr="", reboot_on_update="no", policy_owner="local", enforce_vnic_name="yes", boot_mode="uefi")

    return results

def main():
    module = AnsibleModule(
        argument_spec = dict(
            parent_mo_or_dn = dict(required=True),
            name    = dict(required=True),
            descr  = dict(required=True),
            reboot_on_update       = dict(required=True),
            policy_owner      = dict(required=True),
            enforce_vnic_name    = dict(required=True),
            boot_mode       = dict(required=True)
        )
    )

    results = conf_mo(module)
    module.exit_json(**results)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()

