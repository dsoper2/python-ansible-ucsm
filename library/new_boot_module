#!/usr/bin/python
# -*- mode: python -*-

# Copyright 2015 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from ucsmsdk.mometa.lsboot.LsbootPolicy import LsbootPolicy
from ucsmsdk.mometa.lsboot.LsbootBootSecurity import LsbootBootSecurity
from ucsmsdk.mometa.lsboot.LsbootLan import LsbootLan
from ucsmsdk.mometa.lsboot.LsbootLanImagePath import LsbootLanImagePath
from ucsmsdk.mometa.lsboot.LsbootSan import LsbootSan
from ucsmsdk.ucshandle import UcsHandle
import json
import jsonpickle

def new_boot_module(module):

    name = module.params.get('name')
    descr = module.params.get('descr')
    reboot_on_update = module.params.get('reboot_on_update')
    policy_owner = module.params.get('policy_owner')
    enforce_vnic_name = module.params.get('enforce_vnic_name')
    boot_mode = module.params.get('boot_mode')
    state = module.params.get('state')
    handle = module.params.get('handle')

    results = {}

    ucs_handle = jsonpickle.decode(handle)

###-------CHECK IF MO EXISTS------------------------------------------------

    try:

	mo = ucs_handle.query_dn("org-root/boot-policy-"+name)
	#mo = json.dumps(json.loads(jsonpickle.encode(mo)));
	#results['mo1'] = mo;

    except:
        module.fail_json(msg="Could not query children of org-root")


###-----------------------------check if obj is empty or non-empty -----------------

    obj_exists = lambda obj: True if obj != [] else False

###------------if expected state is "present"---------------------------------------

    if state == "present":

	    if obj_exists(mo):

			if (mo.name == name and mo.descr == descr and mo.boot_mode == boot_mode and mo.reboot_on_update == mo.reboot_on_update and mo.policy_owner == mo.policy_owner and mo.enforce_vnic_name == mo.enforce_vnic_name):
				results['expected'] = True;
				results['modified'] = False;
				results['present'] = True;

			else:
		    		try:
					mo.descr = descr
					mo.boot_mode = boot_mode
					mo.reboot_on_update = reboot_on_update
					mo.policy_owner = policy_owner
					mo.enforce_vnic_name = enforce_vnic_name
					results['expected'] = False;
					results['modified'] = True;
					results['present'] = True;

		   		except:
					module.fail_json(msg="Modify boot policy mo failed")

###----------------else create boot policy with desired config ----------------

	    else:
	    	try:
			mo = LsbootPolicy(parent_mo_or_dn="org-root", name=name, descr=descr, reboot_on_update=reboot_on_update, policy_owner=policy_owner, enforce_vnic_name=enforce_vnic_name, boot_mode=boot_mode)
			results['present'] = False;
			results['created'] = True;
	    		#results['mo_1'] = json.dumps(json.loads(jsonpickle.encode(mo_1))); #register mo in results as json

	   	except:
			module.fail_json(msg="Boot Policy creation failed")


###------------if expected state is "absent"---------------------------------------

    if state == "absent":

	    if obj_exists(mo):

    		try:
			handle.remove_mo(mo)
			results['present'] = False;
			results['removed'] = True;

   		except:
			module.fail_json(msg="Remove boot policy mo failed")

	    else:

    		results['removed'] = False;
		results['present'] = False;

    return results

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name        = dict(required=True),
            descr  = dict(required=True),
            reboot_on_update  = dict(required=True),
            policy_owner        = dict(required=True),
            enforce_vnic_name  = dict(required=True),
            boot_mode  = dict(required=True),
            state  = dict(required=True),
            handle    = dict(required=True)
        )
    )

    results = new_boot_module(module)
    module.exit_json(**results)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()

