#!/usr/bin/python
# -*- mode: python -*-

# Copyright 2015 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: boot_lan
short_description: Create, modify or remove boot lan 

description:
  - Allows to check if boot lan mo exists. If present, check for desired configuration. If desired config is not present, apply settings. If boot lan mo is not present, create and apply desired settings. If the desired state is 'absent', remove boot lan mo if it is currently present
 
version_added: "0.1.0"
author: 
    - "Cisco UCS Team"
    - "Jyotsna Venkatesh"
'''

EXAMPLES = '''
# Create or modify boot lan mo 
  - name: Check desired configuration for Boot Lan creation {{ ucsm_ip }}
    boot_lan:
      name="sample"
      state="present"
      prot="pxe"
      order="1"
      handle={{ handle_output.handle }}
    register: mo_bootlan

# Remove boot lan mo 
  - name: Check desired configuration for Boot Lan creation {{ ucsm_ip }}
    boot_lan:
      name="sample"
      state="absent"
      prot="pxe"
      order="1"
      handle={{ handle_output.handle }}
    register: mo_bootlan
'''

from ucsmsdk.mometa.lsboot.LsbootPolicy import LsbootPolicy
from ucsmsdk.mometa.lsboot.LsbootBootSecurity import LsbootBootSecurity
from ucsmsdk.mometa.lsboot.LsbootLan import LsbootLan
from ucsmsdk.mometa.lsboot.LsbootLanImagePath import LsbootLanImagePath
from ucsmsdk.mometa.lsboot.LsbootSan import LsbootSan
from ucsmsdk.ucshandle import UcsHandle
import json
import pickle
def boot_lan(module):

    prot = module.params.get('prot')
    order = module.params.get('order')
    name = module.params.get('name')
    handle = module.params.get('handle')
    state = module.params.get('state')
    results = {}

    ucs_handle = pickle.loads(handle)


###-------CHECK IF MO EXISTS------------------------------------------------

    try:

	mo = ucs_handle.query_dn("org-root/boot-policy-"+name+"/lan")
	
    except:
        module.fail_json(msg="Could not query children of org-root")


###-------------check if obj is empty or non-empty ------------------------

    obj_exists = lambda obj: True if obj != [] else False

###-------if expected state is "present"----------------------------------

    if state == "present":

	    if mo:

			if (mo.prot == prot and mo.order == order):
				results['expected'] = True;
				results['modified'] = False;
				results['present'] = True;
				results['changed'] = False;
				results['mo_bootlan'] = pickle.dumps(mo);


			else:
		    		try:
					mo.prot = prot
					mo.order = order
					results['expected'] = False;
					results['modified'] = True;
					results['present'] = True;
					ucs_handle.set_mo(mo)
					results['mo_bootlan'] = pickle.dumps(mo);


		   		except:
					module.fail_json(msg="Modify boot lan mo failed")

###----------------else create boot policy with desired config ----------------

	    else:
	    	try:
			obj = ucs_handle.query_dn("org-root/boot-policy-"+name)
			mo= LsbootLan(parent_mo_or_dn=obj, prot=prot, order=order)
			results['present'] = False;
			results['created'] = True;
			results['changed'] = True;
			results['mo_bootlan'] = pickle.dumps(mo);

			ucs_handle.add_mo(mo)
			ucs_handle.commit()

	   	except:
			module.fail_json(msg="Boot Lan creation failed")


###---------if expected state is "absent"-------------------------

    if state == "absent":

	    if mo:

    		try:
			ucs_handle.remove_mo(mo)
			results['present'] = False;
			results['removed'] = True;
			ucs_handle.commit()

   		except:
			module.fail_json(msg="Remove boot lan mo failed")

	    else:

    		results['removed'] = False;
		results['present'] = False;

    return results

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name        = dict(required=True),
            prot        = dict(required=True),
            order  = dict(required=True),
            state        = dict(required=True),
            handle    = dict(required=True)
        )
    )

    results = boot_lan(module)
    module.exit_json(**results)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()

