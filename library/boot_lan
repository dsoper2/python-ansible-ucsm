#!/usr/bin/python
# -*- mode: python -*-

# Copyright 2015 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from ucsmsdk.mometa.lsboot.LsbootPolicy import LsbootPolicy
from ucsmsdk.mometa.lsboot.LsbootBootSecurity import LsbootBootSecurity
from ucsmsdk.mometa.lsboot.LsbootLan import LsbootLan
from ucsmsdk.mometa.lsboot.LsbootLanImagePath import LsbootLanImagePath
from ucsmsdk.mometa.lsboot.LsbootSan import LsbootSan
from ucsmsdk.ucshandle import UcsHandle
import json
import jsonpickle

def boot_lan(module):
    prot = module.params.get('prot')
    order = module.params.get('order')
    mo1 = module.params.get('mo1')
    handle = module.params.get('handle')

    results = {}

    ucs_handle = jsonpickle.decode(handle)

    mo_1_parsed = jsonpickle.decode(mo1)

###-------CHECK IF BOOT LAN MO EXISTS------------------------------------------------

    try:
        mo_list = ucs_handle.query_classid(class_id="LsbootLan", filter_str='(prot,"pxe", type="eq")')
	mo = json.dumps(json.loads(jsonpickle.encode(mo_list)));
	results['mo2'] = mo;

    except:
        module.fail_json(msg="Could not query children of org-root")

    obj_exists = lambda mo11: True if mo11 != [] else False

    if obj_exists(mo_list):
	results['present'] = True;

    else:
	results['present'] = False;

    mo_2 = LsbootLan(parent_mo_or_dn=mo_1_parsed, prot=prot, order=order)
    results['mo_2'] = json.dumps(json.loads(jsonpickle.encode(mo_2)));


  
    return results

def main():
    module = AnsibleModule(
        argument_spec = dict(
            prot        = dict(required=True),
            order  = dict(required=True),
            mo1  = dict(required=True),
            handle    = dict(required=True)
        )
    )

    results = boot_lan(module)
    module.exit_json(**results)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()

